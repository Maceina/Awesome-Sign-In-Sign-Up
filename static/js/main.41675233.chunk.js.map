{"version":3,"sources":["assets/images/spacex_logo.svg","components/Header.js","constants.js","components/SatSetting.js","assets/images/satellite.svg","components/SatelliteList.js","components/WorldMap.js","components/Main.js","components/Footer.js","components/App.js","reportWebVitals.js","index.js"],"names":["Header","className","src","spacex_logo","alt","Component","SAT_API_KEY","SatSettingForm","showSatellite","e","preventDefault","props","form","validateFields","err","values","onShow","getFieldDecorator","this","labelCol","xs","span","sm","wrapperCol","onSubmit","Item","label","rules","required","message","min","max","style","width","placeholder","type","htmlType","textAlign","SatSetting1","Form","create","name","SatelliteList","onChange","target","dataInfo","checked","selected","state","list","addOrRemove","setState","item","status","found","some","entry","satid","push","filter","onShowSatMap","onShowMap","isLoad","satList","satInfo","above","size","disabled","length","onClick","tip","itemLayout","dataSource","renderItem","actions","Meta","avatar","satellite","title","satname","description","launchDate","height","WorldMap","track","data","hasOwnProperty","Error","len","positions","context2","observerData","duration","map","now","Date","i","timer","setInterval","ct","timePassed","time","getTime","clearRect","font","fillStyle","fillText","d3TimeFormat","clearInterval","isDrawing","document","getElementsByClassName","innerHTML","forEach","sat","info","drawSat","pos","satlongitude","satlatitude","nameWithNumber","match","join","projection","xy","color","beginPath","arc","Math","PI","fill","generateMap","land","geoKavrayskiy7","scale","translate","precision","graticule","geoGraticule","canvas","d3Select","refMap","current","attr","canvas2","refTrack","context","node","getContext","path","geoPath","ele","strokeStyle","globalAlpha","stroke","lineWidth","outline","isLoading","d3Scale","schemeCategory10","React","createRef","axios","get","then","res","feature","objects","countries","features","catch","console","log","prevProps","prevState","snapshot","satData","latitude","longitude","elevation","endTime","altitude","urls","url","Promise","all","arr","ref","Main","showMap","preState","showNearbySatellite","setting","isLoadingList","fetchSatellite","response","error","SatSetting","Footer","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.41675233.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/spacex_logo.ad25dfff.svg\";","import React, {Component} from 'react';\nimport spacex_logo  from '../assets/images/spacex_logo.svg';\n\nclass Header extends Component {\n    render() {\n        return (\n            <header className=\"App-header\">\n                <img src={spacex_logo} className=\"App-logo\" alt=\"logo\" />\n                <p className=\"title\">\n                    StarLink Tracker\n                </p>\n            </header>\n        );\n    }\n}\nexport default Header;\n","export const SAT_API_KEY = \"KSUGTE-KKHVE9-9SSVX7-4QBP\";\n\nexport const STARLINK_CATEGORY = \"52\";\n\nexport const NEARBY_SATELLITE = \"rest/v1/satellite/above\";\n\nexport const WORLD_MAP_URL = \"https://unpkg.com/world-atlas@1/world/110m.json\";\n\nexport const SATELLITE_POSITION_URL = \"rest/v1/satellite/positions\";","import React, {Component} from 'react';\nimport {Form, Button, InputNumber} from 'antd';\n\nclass SatSettingForm extends Component {\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        const formItemLayout = {\n            labelCol: {\n                xs: { span: 24 },\n                sm: { span: 11 },\n            },\n            wrapperCol: {\n                xs: { span: 24 },\n                sm: { span: 13 },\n            },\n        };\n        return (\n            <Form {...formItemLayout} className=\"sat-setting\" onSubmit={this.showSatellite}>\n                <Form.Item label=\"Longitude (degrees)\">\n                    {\n                        getFieldDecorator(\"longitude\", {\n                            rules: [\n                                {\n                                    required: true,\n                                    message: \"Please enter your longitude\",\n                                }\n                            ],\n                        })(<InputNumber min={-180} max={180}\n                                        style={{width: \"100%\"}}\n                                        placeholder=\"Enter longitude. e.g. '50'\"\n                        />)\n                    }\n                </Form.Item>\n\n                <Form.Item label=\"Latitude (degrees)\">\n                    {\n                        getFieldDecorator(\"latitude\", {\n                            rules: [\n                                {\n                                    required: true,\n                                    message: \"Please enter your latitude\",\n                                }\n                            ],\n                        })(<InputNumber placeholder=\"Enter latitude. e.g. '60'\"\n                                        min={-90} max={90}\n                                        style={{width: \"100%\"}}\n                        />)\n                    }\n                </Form.Item>\n\n                <Form.Item label=\"Elevation (meters)\">\n                    {\n                        getFieldDecorator(\"elevation\", {\n                            rules: [\n                                {\n                                    required: true,\n                                    message: \"Please enter your elevation\",\n                                }\n                            ],\n                        })(<InputNumber placeholder=\"Enter elevation. e.g. '2000'\"\n                                        min={-413} max={8850}\n                                        style={{width: \"100%\"}}\n                        />)\n                    }\n                </Form.Item>\n\n                <Form.Item label=\"Altitude (degrees)\">\n                    {\n                        getFieldDecorator(\"altitude\", {\n                            rules: [\n                                {\n                                    required: true,\n                                    message: \"Please enter your altitude\",\n                                }\n                            ],\n                        })(<InputNumber placeholder=\"Enter altitude. e.g. '80'\"\n                                        min={0} max={90}\n                                        style={{width: \"100%\"}}\n                        /> )\n                    }\n                </Form.Item>\n\n                <Form.Item label=\"Duration (secs)\">\n                    {\n                        getFieldDecorator(\"duration\", {\n                            rules: [\n                                {\n                                    required: true,\n                                    message: \"Please enter your duration\",\n                                }\n                            ],\n                        })(<InputNumber placeholder=\"Enter duration. e.g. '20'\" min={0} max={90} style={{width: \"100%\"}} />)\n                    }\n                </Form.Item>\n                <Form.Item className=\"show-nearby\">\n                    <Button type=\"primary\" htmlType=\"submit\" style={{textAlign: \"center\"}}>\n                        Find Nearby Satellite\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n\n    showSatellite = e => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                // console.log('Received values of form: ', values);\n                this.props.onShow(values);\n            }\n        });\n    }\n}\n\nconst SatSetting1 = Form.create({name: 'satellite-setting'})(SatSettingForm)\n\nexport default SatSetting1;","export default __webpack_public_path__ + \"static/media/satellite.057df29c.svg\";","import React, {Component} from 'react';\nimport { List, Avatar, Button, Checkbox, Spin } from 'antd';\nimport satellite from \"../assets/images/satellite.svg\";\n\nclass SatelliteList extends Component {\n    constructor(){\n        super();\n        this.state = {\n            selected: [],\n            isLoad: false\n        };\n    }\n\n    onChange = e => {\n        const { dataInfo, checked } = e.target;\n        const { selected } = this.state;\n        const list = this.addOrRemove(dataInfo, checked, selected);\n        this.setState({ selected: list })\n    }\n\n    addOrRemove = (item, status, list) => {\n        const found = list.some( entry => entry.satid === item.satid);\n        if(status && !found){\n            list.push(item)\n        }\n\n        if(!status && found){\n            list = list.filter( entry => {\n                return entry.satid !== item.satid;\n            });\n        }\n        return list;\n    }\n\n    onShowSatMap = () =>{\n        this.props.onShowMap(this.state.selected);\n    }\n\n    render() {\n        const satList = this.props.satInfo ? this.props.satInfo.above : [];\n        const { isLoad } = this.props;\n        const { selected } = this.state;\n\n        return (\n            <div className=\"sat-list-box\">\n                <Button className=\"sat-list-btn\"\n                        size=\"large\"\n                        disabled={ selected.length === 0}\n                        onClick={this.onShowSatMap}\n                >Track on the map</Button>\n                <hr/>\n\n                {\n                    isLoad ?\n                        <div className=\"spin-box\">\n                            <Spin tip=\"Loading...\" size=\"large\" />\n                        </div>\n                        :\n                        <List\n                            className=\"sat-list\"\n                            itemLayout=\"horizontal\"\n                            size=\"small\"\n                            dataSource={satList}\n                            renderItem={item => (\n                                <List.Item\n                                    actions={[<Checkbox dataInfo={item} onChange={this.onChange}/>]}\n                                >\n                                    <List.Item.Meta\n                                        avatar={<Avatar size={50} src={satellite} />}\n                                        title={<p>{item.satname}</p>}\n                                        description={`Launch Date: ${item.launchDate}`}\n                                    />\n\n                                </List.Item>\n                            )}\n                        />\n                }\n            </div>\n        );\n    }\n}\n\nexport default SatelliteList;\n\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Spin } from \"antd\";\nimport { feature } from \"topojson-client\";\nimport { geoKavrayskiy7 } from \"d3-geo-projection\";\nimport { geoGraticule, geoPath } from \"d3-geo\";\nimport { select as d3Select } from \"d3-selection\";\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\nimport * as d3Scale from \"d3-scale\";\nimport { timeFormat as d3TimeFormat } from \"d3-time-format\";\n\nimport {\n    WORLD_MAP_URL,\n    SATELLITE_POSITION_URL,\n    SAT_API_KEY\n} from \"../constants\";\n\nconst width = 960;\nconst height = 600;\n\nclass WorldMap extends Component {\n    constructor() {\n        super();\n        this.state = {\n            isLoading: false,\n            isDrawing: false\n        };\n        this.map = null;\n        this.color = d3Scale.scaleOrdinal(schemeCategory10);\n        this.refMap = React.createRef();\n        this.refTrack = React.createRef();\n    }\n\n    componentDidMount() {\n        axios\n            .get(WORLD_MAP_URL)\n            .then(res => {\n                const { data } = res;\n                const land = feature(data, data.objects.countries).features;\n                this.generateMap(land);\n            })\n            .catch(e => {\n                console.log(\"err in fetch map data \", e.message);\n            });\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevProps.satData !== this.props.satData) {\n            const {\n                latitude,\n                longitude,\n                elevation,\n                altitude,\n                duration\n            } = this.props.observerData;\n            const endTime = duration * 60;\n\n            this.setState({\n                isLoading: true\n            });\n\n            const urls = this.props.satData.map(sat => {\n                const { satid } = sat;\n                const url = `/api/${SATELLITE_POSITION_URL}/${satid}/${latitude}/${longitude}/${elevation}/${endTime}/&apiKey=${SAT_API_KEY}`;\n\n                return axios.get(url);\n            });\n\n            Promise.all(urls)\n                .then(res => {\n                    const arr = res.map(sat => sat.data);\n                    this.setState({\n                        isLoading: false,\n                        isDrawing: true\n                    });\n\n                    if (!prevState.isDrawing) {\n                        this.track(arr);\n                    } else {\n                        const oHint = document.getElementsByClassName(\"hint\")[0];\n                        oHint.innerHTML =\n                            \"Please wait for these satellite animation to finish before selection new ones!\";\n                    }\n                })\n                .catch(e => {\n                    console.log(\"err in fetch satellite position -> \", e.message);\n                });\n        }\n    }\n\n    track = data => {\n        if (!data[0].hasOwnProperty(\"positions\")) {\n            throw new Error(\"no position data\");\n            return;\n        }\n\n        const len = data[0].positions.length;\n        const { duration } = this.props.observerData;\n        const { context2 } = this.map;\n\n        let now = new Date();\n\n        let i = 0;\n\n        let timer = setInterval(() => {\n            let ct = new Date();\n\n            let timePassed = i === 0 ? 0 : ct - now;\n            let time = new Date(now.getTime() + timePassed);\n\n            context2.clearRect(0, 0, width, height);\n\n            context2.font = \"bold 14px sans-serif\";\n            context2.fillStyle = \"#333\";\n            context2.textAlign = \"center\";\n            context2.fillText(d3TimeFormat(time), width / 2, 10);\n\n            if (i >= len) {\n                clearInterval(timer);\n                this.setState({ isDrawing: false });\n                const oHint = document.getElementsByClassName(\"hint\")[0];\n                oHint.innerHTML = \"\";\n                return;\n            }\n\n            data.forEach(sat => {\n                const { info, positions } = sat;\n                this.drawSat(info, positions[i]);\n            });\n\n            i += 60;\n        }, 1000);\n    };\n\n    drawSat = (sat, pos) => {\n        const { satlongitude, satlatitude } = pos;\n\n        if (!satlongitude || !satlatitude) return;\n\n        const { satname } = sat;\n        const nameWithNumber = satname.match(/\\d+/g).join(\"\");\n\n        const { projection, context2 } = this.map;\n        const xy = projection([satlongitude, satlatitude]);\n\n        context2.fillStyle = this.color(nameWithNumber);\n        context2.beginPath();\n        context2.arc(xy[0], xy[1], 4, 0, 2 * Math.PI);\n        context2.fill();\n\n        context2.font = \"bold 11px sans-serif\";\n        context2.textAlign = \"center\";\n        context2.fillText(nameWithNumber, xy[0], xy[1] + 14);\n    };\n\n    render() {\n        const { isLoading } = this.state;\n        return (\n            <div className=\"map-box\">\n                {isLoading ? (\n                    <div className=\"spinner\">\n                        <Spin tip=\"Loading...\" size=\"large\" />\n                    </div>\n                ) : null}\n                <canvas className=\"map\" ref={this.refMap} />\n                <canvas className=\"track\" ref={this.refTrack} />\n                <div className=\"hint\" />\n            </div>\n        );\n    }\n\n    generateMap = land => {\n        const projection = geoKavrayskiy7()\n            .scale(170)\n            .translate([width / 2, height / 2])\n            .precision(0.1);\n\n        const graticule = geoGraticule();\n\n        const canvas = d3Select(this.refMap.current)\n            .attr(\"width\", width)\n            .attr(\"height\", height);\n\n        const canvas2 = d3Select(this.refTrack.current)\n            .attr(\"width\", width)\n            .attr(\"height\", height);\n\n        const context = canvas.node().getContext(\"2d\");\n        const context2 = canvas2.node().getContext(\"2d\");\n\n        let path = geoPath()\n            .projection(projection)\n            .context(context);\n\n        land.forEach(ele => {\n            context.fillStyle = \"#B3DDEF\";\n            context.strokeStyle = \"#000\";\n            context.globalAlpha = 0.7;\n            context.beginPath();\n            path(ele);\n            context.fill();\n            context.stroke();\n\n            context.strokeStyle = \"rgba(220, 220, 220, 0.1)\";\n            context.beginPath();\n            path(graticule());\n            context.lineWidth = 0.1;\n            context.stroke();\n\n            context.beginPath();\n            context.lineWidth = 0.5;\n            path(graticule.outline());\n            context.stroke();\n        });\n\n        this.map = {\n            projection: projection,\n            graticule: graticule,\n            context: context,\n            context2: context2\n        };\n    };\n}\n\nexport default WorldMap;\n","import React, {Component} from 'react';\nimport { Row, Col } from 'antd';\nimport axios from 'axios';\nimport { NEARBY_SATELLITE, SAT_API_KEY, STARLINK_CATEGORY } from '../constants';\nimport SatSetting from './SatSetting';\nimport SatelliteList from './SatelliteList';\nimport WorldMap from './WorldMap';\n\nclass Main extends Component {\n    constructor(){\n        super();\n        this.state = {\n            satInfo: null,\n            satList: null,\n            setting: null,\n            isLoadingList: false\n        }\n    }\n    render() {\n        const { isLoadingList, satInfo, satList, setting } = this.state;\n        return (\n            // grid: col-8 + col-16 = 24 in total\n            // parent component is Main.js instead of App.js\n            // SatSetting: Satellite settings on the left top\n            // SatelliteList: Satellite lists on the left bottom\n            // WorldMap: Map on the right side\n            <Row className='main'>\n                <Col span={8} >\n                    <SatSetting onShow={this.showNearbySatellite}/>\n                    <SatelliteList isLoad={isLoadingList}\n                                   satInfo={satInfo}\n                                   onShowMap={this.showMap} />\n                </Col>\n                <Col span={16} className=\"right-side\">\n                    <WorldMap satData={satList} observerData={setting} />\n                </Col>\n            </Row>\n        );\n    }\n\n    showMap = (selected) => {\n        this.setState(preState => ({\n            ...preState,\n            satList: [...selected]\n        }))\n    }\n\n    showNearbySatellite = (setting) => {\n        this.setState({\n            isLoadingList: true,\n            setting: setting\n        })\n        this.fetchSatellite(setting);\n    }\n\n    fetchSatellite= (setting) => {\n        // parameter for apis\n        const {latitude, longitude, elevation, altitude} = setting;\n        // url  /api/ added\n        const url = `/api/${NEARBY_SATELLITE}/${latitude}/${longitude}/${elevation}/${altitude}/${STARLINK_CATEGORY}/&apiKey=${SAT_API_KEY}`;\n\n        this.setState({\n            isLoadingList: true\n        });\n\n        // make request\n        axios.get(url)\n            .then(response => {\n                console.log(response.data)\n                this.setState({\n                    satInfo: response.data,\n                    isLoadingList: false\n                })\n            })\n            .catch(error => {\n                console.log('err in fetch satellite -> ', error);\n            })\n    }\n}\nexport default Main;\n\n","import React, { Component } from 'react';\nclass Footer extends Component {\n    render() {\n        return (\n            <footer className=\"footer\">\n                ©2021 StarLink Tracker by Audrius Maceina\n            </footer>\n        );\n    }\n}\n\nexport default Footer;\n","import React from 'react';\nimport Header from './Header';\nimport Main from './Main';\nimport Footer from './Footer';\n\nfunction App() {\n  return (\n      <div className=\"App\">\n        <Header />\n        <Main />\n        <Footer />\n      </div>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}